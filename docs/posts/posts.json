[
  {
    "path": "posts/2022-04-19-sobre-a-estrutura-das-variveis/",
    "title": "Sobre a estrutura das variáveis",
    "description": "Variáveis estão em todos os lugares, vamos entender um pouco mais sobre suas estruturas em R.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-19",
    "categories": [],
    "contents": "\r\nOlá! Neste post irei brevemente escrever sobre a estrutura de variáveis\r\n\r\nvariável é aquilo que varia, ou pode variar.\r\n\r\nMas o que é uma variável na prática?\r\nToda vez que criamos um objeto, estamos criando um tipo de variável\r\nDe fato, é bom lembrar que:\r\n\r\n\\(\\color{blue}{\\text{\"Tudo o que existe em R é um objeto.\"}}\\) ~John M. Chambers\r\n\r\nEntão praticamente estaremos lidando com variáveis o tempo inteiro!\r\nPara entender os 4 principais tipos de variáveis crie os seguintes objetos no seu workspace:\r\nlogica <- TRUE\r\ntexto <- \"texto\"\r\nnumerico <- 1\r\nfator <- as.factor(c(“Eu”, “Sou”, “um”, “fator”))\r\nCada objeto é interpretado de uma forma diferente pela linguagem, vamos usar a função class() para entender como cada variável se comporta:\r\nclass()\r\nDigite o seguinte após criar os objetos:\r\nclass(logica)\r\nclass(texto)\r\nclass(numerico)\r\nclass(fator)\r\nVocê deve obter as seguintes respostas:\r\n[1] \"logical\"\r\n[1] \"character\"\r\n[1] \"numeric\"\r\n[1] \"factor\"\r\nCada objeto pertence à uma classe diferente, portanto deve ser tratado como tal.\r\nO que cada estrutura dessas significa?\r\nlogical\r\nlogical (ou lógica): Boolean/binary (Booleana ou Binária), é sempre TRUE ou FALSE\r\ncharacter\r\ncharacter (or string) (texto): texto simples, incluindo simbolos e números dentro de aspas \"texto\", \"isso é um texto\", \"1ss0 também é um t3xt0\".\r\nnumeric\r\nnumeric (numérico): Literalmente números. Operadores matemáticos podem ser usados aqui.\r\nLembrando que: A verdade é que as linguagens de programação não passam de calculadoras chiques que podem:\r\n+ adicionar\r\n- subtrair\r\n* multiplicar\r\n/ dividir\r\n^ exponenciar\r\nfactor\r\nfactor (fator): Números ou strings (texto) ORDENADOS de alguma forma\r\nIsso é um fator:\r\nas.factor(c(\"Eu\", \"sou\", \"um\", \"fator\"))\r\nIsso também é um fator:\r\nas.factor(c(1, 2, 3, 4))\r\nEssas são as 4 principais estruturas que aparecerão em suas análises!\r\nEspero ter ajudado!\r\nMe segue no twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-19T05:25:50-03:00",
    "input_file": "sobre-a-estrutura-das-variveis.knit.md"
  },
  {
    "path": "posts/2022-04-18-grouping-and-counting-in-the-tidyverse/",
    "title": "Grouping and counting in the tidyverse",
    "description": "In this post, I will show you how to group and count your data to generate\nsome stats. During an analysis it's pretty common to spend some time with EDA.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-18",
    "categories": [],
    "contents": "\r\nHello! A pretty important concept to analise data it’s the EDA\r\n\r\nEDA stands for Exploratory Data Analysis\r\n\r\nWe do an EDA by using functions that helps us understand our data, and also with graphs that we are going to develop in future time.\r\nIn this post I’m going to show you how to use the following functions for data analysis and manipulation:\r\ncount()\r\nsummarise()\r\ngroup_by()\r\ntop_n()\r\n\r\nJust a reminder that in this post I’ve wrote about the following functions:\r\nselect()\r\narrange()\r\nfilter()\r\nmutate()\r\n\r\nOk, since we are dealling with the tidyverse don’t forget to load it in your space:\r\nlibrary(tidyverse)\r\nwe will continue to use the iris data set that is already built in R.\r\nPlanning the best way to proceed\r\nLet’s use the function count() to find the total number of each species in our data set.\r\nhead(iris)\r\nThis should give you something like this:\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nSpecies\r\n5.1\r\n3.5\r\n1.4\r\n0.2\r\nsetosa\r\n4.9\r\n3.0\r\n1.4\r\n0.2\r\nsetosa\r\n4.7\r\n3.2\r\n1.3\r\n0.2\r\nsetosa\r\n4.6\r\n3.1\r\n1.5\r\n0.2\r\nsetosa\r\n5.0\r\n3.6\r\n1.4\r\n0.2\r\nsetosa\r\n5.4\r\n3.9\r\n1.7\r\n0.4\r\nsetosa\r\nNotice that the column Species holds a value that can be used to form groups in our data set.\r\nWell, to a better understandment of the values from each column, and also to create a strategy to deal with the data, just use the command glimpse()\r\nglimpse(iris)\r\nThis should give you something like this:\r\nRows: 150  \r\nColumns: 5  \r\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5~  \r\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3~  \r\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1~  \r\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0~  \r\n$ Species      <fct> setosa, setosa, setosa~    \r\nSeems that we have a column Species with names that we can group, but what are those names? There are some ways to obtain this answer, one of them is by using count()\r\ncount()\r\nBe a friend of this function, hahaha\r\nWe can use it as:\r\niris %>%\r\n  count(Species)\r\nNow you should have something like this:\r\nSpecies\r\nn\r\nsetosa\r\n50\r\nversicolor\r\n50\r\nvirginica\r\n50\r\nA column with the groups and another with the number of ocurrencies of each one in our data set.\r\nThere are 50 samples of each species: Iris setosa, Iris versicolor and Iris virginica\r\nCounting with weights\r\nIf we want to understand the frequency of another variable inside our counting, we just put a comma in the function and call the argument wt = column_name\r\niris %>%\r\n  count(Species, wt = Petal.Length)\r\nArguments are useful ways of improving our analysis by using the full potential of a function. To read the arguments associated to a function, just call “?” with the name of the function inside of RStudio:\r\n?count()\r\nAll the docummentation related to the function should appear in a side window. It’s possible to see another cool argument of the count() function, that is, sort (organize). The default is FALSE, but we can switch it to TRUE in the following way:\r\niris %>%\r\ncount(Species, wt = Petal.Length, sort = TRUE)\r\nIn this way, we don’t need to use the arrange()function:\r\nSpecies\r\nn\r\nsetosa\r\n73.1\r\nversicolor\r\n213.0\r\nvirginica\r\n277.6\r\nFlowers from the Iris virginica specie are much larger than those from Iris setosa. Yey, information with only one function!\r\nOk, cool. But what could be the mean size of petals of these species?\r\nNow let’s gather some stats.\r\ngroup_by() e summarise()/summarize()\r\nSome other functions that are really useful to understand our data set are group_by() and summarise() (or summarize() for those who preffer the merican english)\r\nsummarise()\r\nThis function is really useful to explore and reduce data at the same time, you will see that with it we can obtain different information from our data set:\r\niris %>%\r\n  # Summarising to find the minimum, maximum, and the mean Petal size in the whole data set\r\n  summarise(min_sepal = min(Sepal.Length),\r\n            max_sepal = max(Sepal.Length),\r\n            mean_sepal = mean(Sepal.Length))\r\nmin_sepal\r\nmax_sepal\r\nmean_sepal\r\n4.3\r\n7.9\r\n5.84\r\nIt’s also possible to have multiple information at the same time:\r\niris %>%\r\n  # Summarising to find the Min, Max, and the Mean Petal Size, also the Sepal size!\r\n  summarise(min_petal = min(Petal.Length),\r\n            max_sepal = max(Sepal.Length),\r\n            media_sepal = mean(Sepal.Length),\r\n            media_petal = mean(Petal.Length),\r\n            total_n = n())\r\nmin_petal\r\nmax_sepal\r\nmean_sepal\r\nmean_petal\r\ntotal_n\r\n1\r\n7.9\r\n5.843333\r\n3.758\r\n150\r\nPretty nice!\r\ngroup_by()\r\nNow if we want the same stats, but for groups, we can simply add the function group_by() to our pipe before summarise():\r\niris %>%\r\n  # Using summarise combined with gorup_by\r\n  group_by(Species) %>% #now we will have stats for each group\r\n  summarise(min_petal = min(Petal.Length),\r\n            max_sepal = max(Sepal.Length),\r\n            mean_sepal = mean(Sepal.Length),\r\n            mean_petal = mean(Petal.Length))\r\nWe will have this table:\r\nSpecies\r\nmin_petal\r\nmax_sepal\r\nmean_sepal\r\nmean_petal\r\n1 setosa\r\n1\r\n5.8\r\n5.01\r\n1.46\r\n2 versicolor\r\n3\r\n7\r\n5.94\r\n4.26\r\n3 virginica\r\n4.5\r\n7.9\r\n6.59\r\n5.55\r\ntop_n()\r\nThis function help us find top values in our data:\r\niris %>%\r\n  group_by(Species) %>%\r\n  top_n(1, Sepal.Length)\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nSpecies\r\n<dbl>\r\n<dbl>\r\n<dbl>\r\n<dbl>\r\n<fct>\r\n5.8\r\n4\r\n1.2\r\n0.2\r\nsetosa\r\n7\r\n3.2\r\n4.7\r\n1.4\r\nversicolor\r\n7.9\r\n3.8\r\n6.4\r\n2\r\nvirginica\r\nNow you have even more tools to analyse and manipulate data, hope this was useful!\r\n\r\nIn a future post, I will write about these initials that appeared in our table: <dbl>, <fct>, <car>, etc…\r\n\r\nThank you for your time!\r\nFollow me on twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-18T18:38:08-03:00",
    "input_file": "grouping-and-counting-in-the-tidyverse.knit.md"
  },
  {
    "path": "posts/2022-04-17-agrupar-e-contar-dados-com-tidyverse/",
    "title": "Agrupar e contar dados com tidyverse",
    "description": "Neste post, vou mostrar como agrupar e contar seus dados para gerar algumas estatísticas. Durante uma análise de dados é bem comum passar um tempo com EDA.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-17",
    "categories": [],
    "contents": "\r\nOlá! Um conceito bastante importante para analisar dados é o de EDA\r\n\r\nEDA significa Exploratory Data Analysis, ou análise de dados exploratória\r\n\r\nIsso é feito tanto com funções que te ajudam a compreender seus dados, quanto com gráficos que vamos desenvolver futuramente.\r\nNeste post vou me ater às funções para manipulação de dados:\r\ncount()\r\nsummarise()\r\ngroup_by()\r\ntop_n()\r\n\r\nLembrando que neste post escrevi sobre as funções:\r\nselect()\r\narrange()\r\nfilter()\r\nmutate()\r\n\r\nOk, como estamos usando o tidyverse não se esqueça de carregá-lo na memória:\r\nlibrary(tidyverse)\r\nContinuaremos usando o dataset iris que já está no seu R.\r\nPlanejando a melhor forma para proceder\r\nVamos usar a função count() para encontrar o número total de cada espécie no data set.\r\nhead(iris)\r\nEste comando deve te mostrar algo assim:\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nSpecies\r\n5.1\r\n3.5\r\n1.4\r\n0.2\r\nsetosa\r\n4.9\r\n3.0\r\n1.4\r\n0.2\r\nsetosa\r\n4.7\r\n3.2\r\n1.3\r\n0.2\r\nsetosa\r\n4.6\r\n3.1\r\n1.5\r\n0.2\r\nsetosa\r\n5.0\r\n3.6\r\n1.4\r\n0.2\r\nsetosa\r\n5.4\r\n3.9\r\n1.7\r\n0.4\r\nsetosa\r\nPerceba que a coluna Species guarda um valor que pode ser usado para agrupar nosso data set.\r\nPara compreender melhor o que há em cada coluna e como traçar uma boa estratégia para trabalhar com os dados, basta usar o comando glimpse()\r\nglimpse(iris)\r\nIsso deve te mostrar algo assim:\r\nRows: 150  \r\nColumns: 5  \r\n$ Sepal.Length \\<dbl\\> 5.1, 4.9, 4.7, 4.6, 5.0, 5~  \r\n$ Sepal.Width  \\<dbl\\> 3.5, 3.0, 3.2, 3.1, 3.6, 3~  \r\n$ Petal.Length \\<dbl\\> 1.4, 1.4, 1.3, 1.5, 1.4, 1~  \r\n$ Petal.Width  \\<dbl\\> 0.2, 0.2, 0.2, 0.2, 0.2, 0~  \r\n$ Species      \\<fct\\> setosa, setosa, setosa~    \r\nParece que temos uma coluna Species com nomes que podemos usar para agrupar, mas quais são esses nomes? Existem algumas formas para compreender isso, uma delas é usar a função count()\r\ncount()\r\nFaça amizade com essa função, hahaha\r\nPodemos usá-la da seguinte forma:\r\niris %>%\r\n  count(Species)\r\nAgora você deve ter algo assim:\r\nSpecies\r\nn\r\nsetosa\r\n50\r\nversicolor\r\n50\r\nvirginica\r\n50\r\nUma coluna com os grupos e outra com número de ocorrências de cada no nosso data set.\r\nPerceba que existem 50 amostras de cada espécie: Iris setosa, Iris versicolor e Iris virginica\r\nContagem com pesos\r\nSe quisermos entender a frequencia de outra variável dentro da contagem basta colocarmos uma virgula e chamar o argumento wt = nome_da_coluna\r\niris %>%\r\n  count(Species, wt = Petal.Length)\r\nArgumentos são formas muito úteis de melhorar a análise e usar todo o potencial de uma função, para ler os argumentos associados à funções basta chamar “?” junto com o nome da função dentro do RStudio:\r\n?count()\r\nToda a documentação relacionada a função deve aparecer numa janela ao lado. Nela é possível ver outro argumento bacana da função count(), o sort (organizar). O padrão é FALSE, mas podemos trocar para TRUE da seguinte forma:\r\niris %>%\r\ncount(Species, wt = Petal.Length, sort = TRUE)\r\nSpecies\r\nn\r\nsetosa\r\n73.1\r\nversicolor\r\n213.0\r\nvirginica\r\n277.6\r\nAs flores da espécies Iris virginica são muito maiores do que as da espécie Iris setosa. Yey, informação com apenas uma função!\r\nOk, maneiro. Mas qual será o tamanho médio das pétalas dessas espécies?\r\ngroup_by() e summarise()/summarize()\r\nOutras funções muito úteis para compreender o data set são group_by() e summarise() (ou summarize() para aqueles que curtem o mérican english)\r\nsummarise()\r\nEssa função é muito útil para explorar e reduzir o dado ao mesmo tempo, veja como com ela podemos obter diversas informações sobre nosso dataset:\r\niris %>%\r\n  # Resumindo para encontrar o minimo, máximo, e a média do tamanho de pétalas\r\n  summarise(min_sepala = min(Sepal.Length),\r\n            max_sepala = max(Sepal.Length),\r\n            media_sepala = mean(Sepal.Length))\r\nmin_sepala\r\nmax_sepala\r\nmedia_sepala\r\n4.3\r\n7.9\r\n5.84\r\nTambém é possível obter múltiplas informações ao mesmo tempo:\r\niris %>%\r\n  # Resumindo para encontrar o minimo, máximo, e a média do tamanho de pétalas\r\n  summarise(min_petala = min(Petal.Length),\r\n            max_sepala = max(Sepal.Length),\r\n            media_sepala = mean(Sepal.Length),\r\n            media_petala = mean(Petal.Length),\r\n            total_n = n())\r\nmin_petala\r\nmax_sepala\r\nmedia_sepala\r\nmedia_petala\r\ntotal_n\r\n1\r\n7.9\r\n5.843333\r\n3.758\r\n150\r\nBastante maneiro!\r\ngroup_by()\r\nAgora se quisermos as mesmas estísticas, mas para o grupos, basta adicionar a função group_by() antes de summarise():\r\niris %>%\r\n  # Resumindo para encontrar o minimo, máximo, e a média do tamanho de pétalas\r\n  group_by(Species) %>% #agora teremos estatísticas por grupos\r\n  summarise(min_petala = min(Petal.Length),\r\n            max_sepala = max(Sepal.Length),\r\n            media_sepala = mean(Sepal.Length),\r\n            media_petala = mean(Petal.Length))\r\nTemos algo assim:\r\nSpecies\r\nmin_petala\r\nmax_sepala\r\nmedia_sepala\r\nmedia_petala\r\n1 setosa\r\n1\r\n5.8\r\n5.01\r\n1.46\r\n2 versicolor\r\n3\r\n7\r\n5.94\r\n4.26\r\n3 virginica\r\n4.5\r\n7.9\r\n6.59\r\n5.55\r\ntop_n()\r\nEssa função nos ajuda a encontrar os maiores valores do data set:\r\niris %>%\r\n  group_by(Species) %>%\r\n  top_n(1, Sepal.Length)\r\nSepal.Length\r\nSepal.Width\r\nPetal.Length\r\nPetal.Width\r\nSpecies\r\n<dbl>\r\n<dbl>\r\n<dbl>\r\n<dbl>\r\n<fct>\r\n5.8\r\n4\r\n1.2\r\n0.2\r\nsetosa\r\n7\r\n3.2\r\n4.7\r\n1.4\r\nversicolor\r\n7.9\r\n3.8\r\n6.4\r\n2\r\nvirginica\r\nAgora você tem mais algumas ferramentas para analisar e manipular dados, espero ter ajudado!\r\n\r\nNum próximo post falarei sobre essas siglas que aparecem em nossa tabela: como <dbl>, <fct>, <car>, etc…\r\n\r\nEspero que tenham gostado!\r\nMe segue no twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-17T18:54:44-03:00",
    "input_file": "agrupar-e-contar-dados-com-tidyverse.knit.md"
  },
  {
    "path": "posts/2022-04-16-o-poder-do-tidyverse-manipulao-de-dados/",
    "title": "O poder do tidyverse: manipulação de dados",
    "description": "Vou traduzir alguns posts meus aqui, para poder ajudar outros falantes de português a entenderem e usarem R para manipular dados. O Tidyverse é um pacote bastante importante para manipulação de dados, pois é fácil de usar e aprender.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-16",
    "categories": [],
    "contents": "\r\nOlá! Neste post vou te mostrar como usar alguns verbos básicos do tidyverse:\r\nselect()\r\narrange()\r\nfilter()\r\nmutate()\r\nTodos esses verbos também são funções para lidar com dados do mundo real, mas como coletar esses dados pode ser bem complicado vamos usar um conjunto de dados (data set) do R.\r\nVamos dar uma olhada no data set iris que nos da medidas em centimetros do tamanho de sepalas e petalas de tres espécies de angiospermas: Iris setosa, Iris versicolor, e Iris virginica.\r\nE claro, já que estamos lidando com o tidyverse, temos que carregar o pacote:\r\nlibrary(tidyverse)\r\nVamos ver o data set:iris\r\nou só uma parte dele:head(iris)\r\nou apenas dar uma olhadinha para aqueles que curtem stats:glimpse(iris)\r\nPipe ‘%>%’ e select()\r\nAntes de tudo, vamos começar com o selecionar e já que estamos usando o tidyverse, também começaremos a usar os pipes também conhecido como %>% ou |>, tudo depende do que você mais gosta de escrever.\r\nEntão para selecionar um conjunto de colunas que você queira, você pode escrever:\r\niris %>% #aqui incluimos o dataframe iris no pipe para a proxima função\r\nselect(Sepal.Length, Species) #selecionando duas colunas do dataframe `Sepal.Length` e `Species`\r\nNote o pipe “%>%”, isso significa que a saída de uma função será usada como entrada para a próxima, e o primeiro pipe apenas inclui o data set iris dentro da função select(Sepal.Length, Species)\r\nTranquilo, certo?\r\nAgora você deve ter um data set um pouco menor, se quiser checar, basta chamar o mesmo script de antes, mas com um pipe para a função head() que mostra apenas as primeiras 10 linhas:\r\niris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\nApenas uma dica, isso também funcionaria:\r\nhead(select(iris, Sepal.Length, Species))\r\nVocê deve ter algo assim:\r\nSepal.Length\r\nSpecies\r\n5.1\r\nsetosa\r\n4.9\r\nsetosa\r\n4.7\r\nsetosa\r\n4.6\r\nsetosa\r\n5.0\r\nsetosa\r\n5.4\r\nsetosa\r\nPara melhorar nosso trabalho, devemos criar um objeto que recebe esse data set menor:\r\nÉ bom nomear as coisas de acordo com o que elas são, neste caso to usando o seguinte nome: selected_iris\r\nselected_iris <- iris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\narrange()\r\nSuponha que você queira dar uma rápida olhada na distribuição de tamanhos de sepalas ordenadas, podemos tanto chamar a função view() no RStudio, ou usar a função arrange():\r\narrange(selected_iris) %>%\r\n  head()\r\nVoce deve ver algo assim:\r\nSepal.Length\r\nSpecies\r\n4.3\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.5\r\nsetosa\r\n4.6\r\nsetosa\r\narrange(desc())\r\nVoce notará que o dataframe agora está em ordem, dos menores para o maiores valores de tamanho de sepalas (sepalas são aquelas folhas que apoiam as petalas). Mas, e se quisessemos ordenar em ordem descendente? Para isso precisamos usar a função desc() dentro da função arrange():\r\narrange(desc(selected_iris)) %>%\r\n  head()\r\nAgora temos:\r\nSepal.Length\r\nSpecies\r\n7.9\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.6\r\nvirginica\r\nfilter()\r\nBeleza, agora que sabemos select() e arrange(), bora aprender mais dois outros verbos que também são ótimos para manipulação e análise de dados:\r\nPrimeiro, vamos usar o filtro ou filter() para filtrar apenas a espécie Iris virginica do nosso dataset:\r\niris %>%\r\n  filter(Species == \"virginica\")\r\nNote que estamos usando o operador ==, que significa: queremos filtrar tudo da coluna Species que seja igual ao nosso texto (note as aspas) “virginica”.\r\nSuponha que você queira filtrar apenas aqueles que NÃO são Iris virginica:\r\niris %>%\r\n  filter(Species != \"virginica\")\r\nAgora usamos o operador != que significa diferente ou desigual, sendo assim recebemos um data set com Iris setosa e Iris versicolor apenas, para checar a veracidade, vamos criar objetos que recebem nossos data set filtrados:\r\niris_virginica <- \r\n  iris %>%\r\n  filter(Species == \"virginica\")\r\n  \r\n  #And let's create the other one\r\n  \r\nnot_iris_virginica <-\r\n  iris %>%\r\n  filter(Species != \"virginica\")\r\nChecando usando operadores condicionais\r\nAmbos operadores == (igual a) e != (diferente de) podem ser usados em multiplas situações no R, por exemplo para checar se nosso filtro deu certo:\r\n#Veja que interessante essa forma da função select:\r\nselect(iris_virginica, Species) == \"virginica\"\r\nIsso deve retornar TRUE para todas as linhas dentro do nosso dado. Quando testamos nossas afirmativas com condicionais, o R pode dizer se é TRUE ou FALSE (VERDADEIRO ou FALSO).\r\nVamos tentar mais uma:\r\n#chamando o data set dentro da função de novo:\r\nselect(not_iris_virginica, Species) == \"virginica\"\r\nAgora devemos receber apenas FALSE para todas as linhas do nosso conjunto de dados not_iris_virginica. O que significa que nosso filtro deu certo, legal né?\r\nVou escrever sobre condicionais e todas essas paradas booleanas em outro post, já que existem muitos outros operadores poderosos (>=, <=, >, <, &, |, e por ai vai…)\r\nAgora vamos continuar com outros tidyverbo ;)\r\nmutate()\r\nO último e, talvez mais importante, verbo que vamos aprender é o mutate()\r\nEssa é uma ótima função para manipular, transformar e criar colunas em nosso dado\r\nmutate() funciona assim:\r\nmutate(coluna_que_quero_criar = equação)\r\nSuponha que queremos saber a razão entre o tamanho de pétalas e sepalas de todas as espécies:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nExistem muitos outros usos para o verbo mutate, um deles é classificar dados combinando com a função ifelse(), que cria uma condição dentro do mutate():\r\nQueremos classificar nossas flores como “grandes” ou “pequenas”, baseado na razão obtida anteriormente, isso significa que “se ratio_petal_sepal < 0.5, então a coluna”size” recebe a tag small , caso contrário recebe a tag large:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length) %>%\r\n  mutate(size = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\nPerceba que estamos usando um mutate duplo, isso não seria necessário se tivessemos criado um objeto anteriormente:\r\nratio_iris <- iris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nAgora temos o objeto ratio_iris e podemos compreender como mutate() funciona combinado com ifelse():\r\nratio_iris %>%\r\n  mutate(size  = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\nExplicando mutate() combinado com ifelse()\r\nratio_iris %>% #botando o dado no cachimbo\r\n  mutate(size  = #chamando a função mutate e criando uma coluna chamada \"size\"\r\n  ifelse(ratio_petal_sepal < 0.5, #se essa afirmação for `TRUE` e o número dentro de ratio_petal_sepal for menor que 0.5\r\n  \"small\", #então a coluna \"size\" receberá a tag \"small\"\r\n  \"large\" #caso contrário receberá \"large\"))\r\nNo fim, teremos um data set completamente marcado com a nossa condição, num próximo post vou mostrar como você pode usar a função count() para obter algumas estatísticas do nosso data set. Espero que você tenha gostado.\r\nSabendo que o conteúdo é escasso, vou tentar sempre traduzir alguns posts meus.\r\nTente usar essas quatro funções em outros data sets do R, como no mpg!\r\nObrigado por ter chegado até aqui :)\r\nMe segue no twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-17T07:23:43-03:00",
    "input_file": "o-poder-do-tidyverse-manipulao-de-dados.knit.md"
  },
  {
    "path": "posts/2022-04-13-the-power-of-the-tidyverse-manipulating-data/",
    "title": "The power of the tidyverse: manipulating data",
    "description": "In this post I will show you how to use the basic tools from tidyverse. This tools are useful to deal with a whole sort of data.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-13",
    "categories": [],
    "contents": "\r\nHello! In this post I will show you how to use the basic verbs of the tidyverse:\r\nselect()\r\narrange()\r\nfilter()\r\nmutate()\r\nAll these verbs are also great functions to deal with data from the real world, but since gathering this data can be very time useful we will use a built in data set from R.\r\nLet’s have a look in the Iris data set which gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, Iris versicolor, and Iris virginica.\r\nAnd of course since we are dealing with the tidyverse we have to load it:\r\nlibrary(tidyverse)\r\nwe can call it and have a look:iris\r\nor just a part of it:head(iris)\r\nor just a glimpse for those who love stats:glimpse(iris)\r\nPipe ‘%>%’ and select()\r\nFirst of all let’s start with select and since we are using a tidyverse way of thinking, we are going to start using pipes also known as %>% or |>, depending on which you prefer to write.\r\nSo, to select a sort of columns you wish you can:\r\niris %>% #here we are calling the dataframe iris and piping to the next function\r\nselect(Sepal.Length, Species) #here we are calling the function and  choosing two columns `Sepal.Length` and `Species`\r\nNote the pipe “%>%”, that means that the output of one function will be the input of the next one, and the first pipe just includes the iris data set into the next function select(Sepal.Length, Species)\r\nPretty easy, right?\r\nNow you should have a smaller data set, only the selected columns from iris to work with, if you want to check it, just call the same script again, but using the head() function to see only the first 10 lines:\r\niris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\nJust a tip, this would also work (but it’s harder to read):\r\nhead(select(iris, Sepal.Length, Species))\r\nNow you should have something like this:\r\nSepal.Length\r\nSpecies\r\n5.1\r\nsetosa\r\n4.9\r\nsetosa\r\n4.7\r\nsetosa\r\n4.6\r\nsetosa\r\n5.0\r\nsetosa\r\n5.4\r\nsetosa\r\nTo make our work even easier, we should create an object with our smaller iris dataframe:\r\nIt’s good to name it as it is, in this case I will use the following name: selected_iris\r\nselected_iris <- iris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\narrange()\r\nSuppose you want now to quick check the ordered distribution of Sepal Lengths, we can either call the view() function inside RStudio, or use the arrange() function, like this:\r\narrange(selected_iris) %>%\r\n  head()\r\nYou should have something like this:\r\nSepal.Length\r\nSpecies\r\n4.3\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.5\r\nsetosa\r\n4.6\r\nsetosa\r\narrange(desc())\r\nYou will notice that the dataframe is now ordered from the lowest to the highest values of Sepal.Length. But what if we wanted to arrange in a descending order? Then we should just use the function desc() inside of our arrange() calling:\r\narrange(desc(selected_iris)) %>%\r\n  head()\r\nNow you will have:\r\nSepal.Length\r\nSpecies\r\n7.9\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.6\r\nvirginica\r\nfilter()\r\nAlright, so now that we already know how to select() and arrange(), let’s learn another two verbs that are great for data manipulation and analysis:\r\nFirst of all, let’s use the filter() function to gather only Iris virginica species from our dataset:\r\niris %>%\r\n  filter(Species == \"virginica\")\r\nNote that we are using the == operator, meaning we want to filter everything from the Species column that is equal to our text “virginica”.\r\nSuppose you want to filter only those that are not Iris virginica:\r\niris %>%\r\n  filter(Species != \"virginica\")\r\nNow we have used the != which stands for different or not equal, then we will have received a data set with Iris setosa and Iris versicolor species, and to check if this is true, let’s create objects that receives our filtered data sets:\r\niris_virginica <- \r\n  iris %>%\r\n  filter(Species == \"virginica\")\r\n  \r\n  #And let's create the other one\r\n  \r\nnot_iris_virginica <-\r\n  iris %>%\r\n  filter(Species != \"virginica\")\r\nChecking with conditional operators\r\nBoth of these operators == (equal) and != (not equal) can be used in different contexts in R, for example to check if everything was okay with our filtering:\r\n#here I am going to use another form of the select funcion:\r\nselect(iris_virginica, Species) == \"virginica\"\r\nAnd this should return TRUE for all the rows inside our data set. When we test our affirmations with conditionals, R can check if that is TRUE or FALSE.\r\nLet’s try another one:\r\n#just calling the data set inside the function again:\r\nselect(not_iris_virginica, Species) == \"virginica\"\r\nAnd now you should receive FALSE for all the rows inside our not_iris_virginica data set. Meaning our filter worked, cool right?\r\nI will talk about conditionals and all those boolean things in another post, since there are many other operators (>=, <=, >, <, &, |, and so on…)\r\nNow I am going to continue with another tidyverb ;)\r\nmutate()\r\nThe last and, maybe most important, function we are going to learn is mutate()\r\nThis is a great function to manipulate data and to transform or create new columns in our data set\r\nmutate() works like this:\r\nmutate(column_you_want_to_create = equation)\r\nSuppose you want to know the ratio between Petal and Sepal length of all the species:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nThere are many uses for the mutate verb, another one is to sort data combining it with the ifelse() function, which creates a condition:\r\nImagine we want to classify our flowers as being “large” or “small” based on our ratio, that means “if ratio_petal_sepal < 0.5, then it receives a small tag, otherwise it receives a large tag:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length) %>%\r\n  mutate(size = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\nCheck that we are using a double mutate calling, just because we have not created an object, let’s tidy it:\r\nratio_iris <- iris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nNow we have the object ratio_iris and I can explain how mutate()combined with ifelse() works:\r\nratio_iris %>%\r\n  mutate(size  = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\nExplaining mutate() combined with ifelse()\r\nratio_iris %>% #putting the data set through our pipe\r\n  mutate(size  = #calling mutate and creating the column \"size\"\r\n  ifelse(ratio_petal_sepal < 0.5, #if this statement is `TRUE` and the number inside of ratio_petal_sepal is lesser than 0.5\r\n  \"small\", #then the column \"size\" will receive that tag \"small\"\r\n  \"large\" #else or otherwise it will receive \"large\"))\r\nYou will have a complete sorted data set, on the next post I will show you how to count() and to gather some stats from data. Hope you liked.\r\nNow you can manipulate data and start a data analysis project using the tidyverse\r\nTry using those functions in the other data sets from R, like the mpg for example!\r\nThank you for your time :)\r\nFollow me on twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-17T07:22:43-03:00",
    "input_file": "the-power-of-the-tidyverse-manipulating-data.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Portfolio!",
    "description": "This is where I am going to post everything I did using R and other programming languages!",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-11T05:53:57-03:00",
    "input_file": "welcome.knit.md"
  },
  {
    "path": "posts/2022-04-11-testing/",
    "title": "Testing!",
    "description": "This is my first post, it is a test so there's nothing in it besides text and\nstuff. You know what, I am going to write something... Nah, changed my mind,\nlet's just keep this a test, sorry.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-11T05:54:41-03:00",
    "input_file": "testing.knit.md"
  }
]
