[
  {
    "path": "posts/2022-04-13-the-power-of-the-tidyverse-manipulating-data/",
    "title": "The power of the tidyverse: manipulating data",
    "description": "In this post I will show you how to use the basic tools from tidyverse. This tools are useful to deal with a whole sort of data.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-13",
    "categories": [],
    "contents": "\r\n#Hello! In this post I will show you how to use the basic verbs of the tidyverse:\r\nselect()\r\narrange()\r\nfilter()\r\nmutate()\r\nAll these verbs are also great functions to deal with data from the real world, but since gathering this data can be very time useful we will use a built in data set from R.\r\nLet’s have a look in the Iris data set which gives the measurements in centimeters of the variables sepal length, sepal width, petal length and petal width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, Iris versicolor, and Iris virginica.\r\nAnd of course since we are dealing with the tidyverse we have to load it:\r\nlibrary(tidyverse)\r\nwe can call it and have a look: iris or just a part of it: head(iris) or just a glimpse for those who love stats: glimpse(iris)\r\n#Pipe ‘%>%’ and select()\r\nFirst of all let’s start with select and since we are using a tidyverse way of thinking, we are going to start using pipes also known as %>% or |>, depending on which you prefer to write.\r\nSo, to select a sort of columns you wish you can:\r\niris %>% #here we are calling the dataframe iris and piping to the next function\r\nselect(Sepal.Length, Species) #here we are calling the function and  choosing two columns `Sepal.Length` and `Species`\r\nNote the pipe “%>%”, that means that the output of one function will be the input of the next one, and the first pipe just includes the iris data set into the next function select(Sepal.Length, Species)\r\nPretty easy, right?\r\nNow you should have a smaller data set, only the selected columns from iris to work with, if you want to check it, just call the same script again, but using the head() function to see only the first 10 lines:\r\niris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\nJust a tip, this would also work (but it’s harder to read):\r\nhead(select(iris, Sepal.Length, Species))\r\nNow you should have something like this:\r\nSepal.Length\r\nSpecies\r\n5.1\r\nsetosa\r\n4.9\r\nsetosa\r\n4.7\r\nsetosa\r\n4.6\r\nsetosa\r\n5.0\r\nsetosa\r\n5.4\r\nsetosa\r\nTo make our work even easier, we should create an object with our smaller iris dataframe:\r\nIt’s good to name it as it is, in this case I will use the following name: selected_iris\r\nselected_iris <- iris %>%\r\n  select(Sepal.Length, Species) %>%\r\n  head()\r\n#arrange()\r\nSuppose you want now to quick check the distribution of Sepal Lengths, we can either call the view() function inside RStudio, or use the arrange() function, like this:\r\narrange(selected_iris) %>%\r\n  head()\r\nYou should have something like this:\r\nSepal.Length\r\nSpecies\r\n4.3\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.4\r\nsetosa\r\n4.5\r\nsetosa\r\n4.6\r\nsetosa\r\nYou will notice that the dataframe is now ordered from the lowest to the highest values of Sepal.Length. But what if we wanted to arrange in a descending order? Then we should just use the function desc() inside of our arrange() calling:\r\narrange(desc())\r\narrange(desc(selected_iris)) %>%\r\n  head()\r\nNow you will have:\r\nSepal.Length\r\nSpecies\r\n7.9\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.7\r\nvirginica\r\n7.6\r\nvirginica\r\n#filter()\r\nAlright, so now that we already know how to select() and arrange(), let’s learn another two verbs that are great for data manipulation and analysis:\r\n##First of all, let’s use the filter() function to gather only Iris virginica species from our dataset:\r\niris %>%\r\n  filter(Species == \"virginica\")\r\nNote that we are using the == operator, meaning we want to filter everything from the Species column that is equal to our text “virginica”.\r\n##Suppose you want to filter only the one’s that are not Iris virginica:\r\niris %>%\r\n  filter(Species != \"virginica\")\r\nNow we have used the != which stands for different or not equal, then we will have received a data set with Iris setosa and Iris versicolor species, and to check if this is true, let’s create objects that receives our filtered data sets:\r\niris_virginica <- \r\n  iris %>%\r\n  filter(Species == \"virginica\")\r\n  \r\n  #And let's create the other one\r\n  \r\nnot_iris_virginica <-\r\n  iris %>%\r\n  filter(Species != \"virginica\")\r\n###Checking with conditional operators\r\nBoth of these operators == (equal) and != (not equal) can be used in different contexts in R, for example to check if everything was okay with our filtering:\r\n#here I am going to use another form of the select funcion:\r\nselect(iris_virginica, Species) == \"virginica\"\r\nAnd this should return TRUE for all the rows inside our data set. When we test our affirmations with conditionals, R can check if that is TRUE or FALSE.\r\nLet’s try another one:\r\n#just calling the data set inside the function again:\r\nselect(not_iris_virginica, Species) == \"virginica\"\r\nAnd now you should receive FALSE for all the rows inside our not_iris_virginica data set. Meaning our filter worked, cool right?\r\nI will talk about conditionals and all those boolean things in another post, since there are many other operators (>=, <=, >, <, &, |, and so on…)\r\nNow I am going to continue with another tidyverb ;)\r\n#mutate()\r\nThe last and, maybe most important, function we are going to learn is mutate()\r\nThis is a great function to manipulate data and to transform or create new columns in our data set\r\nmutate() works like this:\r\nmutate(column_you_want_to_create = equation)\r\nSuppose you want to know the ratio between Petal and Sepal length of all the species:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nThere are many uses for the mutate verb, another one is to sort data combining it with the ifelse() function, which creates a condition:\r\nImagine we want to classify our flowers as being “large” or “small” based on our ratio, that means “if ratio_petal_sepal < 0.5, then it receives a small tag, otherwise it receives a large tag:\r\niris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length) %>%\r\n  mutate(size = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\nCheck that we are using a double mutate calling, just because we have not created an object, let’s tidy it:\r\nratio_iris <- iris %>%\r\n  mutate(ratio_petal_sepal = Petal.Length/Sepal.Length)\r\nNow we have the object ratio_iris and I can explain how mutate()combined with ifelse() works:\r\nratio_iris %>%\r\n  mutate(size  = ifelse(ratio_petal_sepal < 0.5, \"small\", \"large\"))\r\n###Explaining mutate() combined with ifelse()\r\nratio_iris %>% #putting the data set through our pipe mutate(size = #calling mutate and creating the column “size” ifelse(ratio_petal_sepal < 0.5, #if this statement is TRUE and the number inside of ratio_petal_sepal is lesser than 0.5 “small”, #, then the column “size” will receive that tag “small” “large” #else or otherwise it will receive “large”))\r\nYou will have a complete sorted data set, on the next post I will show you how to count() and to gather some stats from data. Hope you liked.\r\nNow you can manipulate data and start a data analysis project using the tidyverse\r\nTry using those functions in the other data sets from R, like the mpg for example!\r\nThank you for your time :) Follow me on twitter: @gimbgomes\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-16T18:22:48-03:00",
    "input_file": "the-power-of-the-tidyverse-manipulating-data.knit.md"
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Portfolio!",
    "description": "This is where I am going to post everything I did using R and other programming languages!",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-11T05:53:57-03:00",
    "input_file": "welcome.knit.md"
  },
  {
    "path": "posts/2022-04-11-testing/",
    "title": "Testing!",
    "description": "This is my first post, it is a test so there's nothing in it besides text and\nstuff. You know what, I am going to write something... Nah, changed my mind,\nlet's just keep this a test, sorry.",
    "author": [
      {
        "name": "Guilherme Bastos Gomes",
        "url": "https://gbastosg.github.io/guilhermesportfolio/"
      }
    ],
    "date": "2022-04-11",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2022-04-11T05:54:41-03:00",
    "input_file": "testing.knit.md"
  }
]
